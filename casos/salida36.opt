Program [Decl (VarDef int "total"),Com (StmtExpr (Assign "total" (NatLit 0))),Decl (VarDef int "fin"),Decl (VarDef char "in"),Decl (VarDef int "num"),Com (StmtExpr (Assign "num" (NatLit 0))),Com (StmtExpr (Assign "fin" (NatLit 0))),Com (While (Unary Not (Var "fin")) [StmtExpr (Assign "in" GetChar),If (Binary Equ (Var "in") (CharLit '0')) [StmtExpr (Assign "num" (Binary Mult (Var "num") (NatLit 10)))] [If (Binary Equ (Var "in") (CharLit '1')) [StmtExpr (Assign "num" (Binary Plus (Binary Mult (Var "num") (NatLit 10)) (NatLit 1)))] [If (Binary Equ (Var "in") (CharLit '2')) [StmtExpr (Assign "num" (Binary Plus (Binary Mult (Var "num") (NatLit 10)) (NatLit 2)))] [If (Binary Equ (Var "in") (CharLit '3')) [StmtExpr (Assign "num" (Binary Plus (Binary Mult (Var "num") (NatLit 10)) (NatLit 3)))] [If (Binary Equ (Var "in") (CharLit '4')) [StmtExpr (Assign "num" (Binary Plus (Binary Mult (Var "num") (NatLit 10)) (NatLit 4)))] [If (Binary Equ (Var "in") (CharLit '5')) [StmtExpr (Assign "num" (Binary Plus (Binary Mult (Var "num") (NatLit 10)) (NatLit 5)))] [If (Binary Equ (Var "in") (CharLit '6')) [StmtExpr (Assign "num" (Binary Plus (Binary Mult (Var "num") (NatLit 10)) (NatLit 6)))] [If (Binary Equ (Var "in") (CharLit '7')) [StmtExpr (Assign "num" (Binary Plus (Binary Mult (Var "num") (NatLit 10)) (NatLit 7)))] [If (Binary Equ (Var "in") (CharLit '8')) [StmtExpr (Assign "num" (Binary Plus (Binary Mult (Var "num") (NatLit 10)) (NatLit 8)))] [If (Binary Equ (Var "in") (CharLit '9')) [StmtExpr (Assign "num" (Binary Plus (Binary Mult (Var "num") (NatLit 10)) (NatLit 9)))] [StmtExpr (Assign "fin" (NatLit 1))]]]]]]]]]]]),Com (StmtExpr (Assign "total" (Var "num"))),Decl (VarDef char "op"),Com (StmtExpr (Assign "op" GetChar)),Com (StmtExpr (Assign "num" (NatLit 0))),Com (StmtExpr (Assign "fin" (NatLit 0))),Com (While (Unary Not (Var "fin")) [StmtExpr (Assign "in" GetChar),If (Binary Equ (Var "in") (CharLit '0')) [StmtExpr (Assign "num" (Binary Mult (Var "num") (NatLit 10)))] [If (Binary Equ (Var "in") (CharLit '1')) [StmtExpr (Assign "num" (Binary Plus (Binary Mult (Var "num") (NatLit 10)) (NatLit 1)))] [If (Binary Equ (Var "in") (CharLit '2')) [StmtExpr (Assign "num" (Binary Plus (Binary Mult (Var "num") (NatLit 10)) (NatLit 2)))] [If (Binary Equ (Var "in") (CharLit '3')) [StmtExpr (Assign "num" (Binary Plus (Binary Mult (Var "num") (NatLit 10)) (NatLit 3)))] [If (Binary Equ (Var "in") (CharLit '4')) [StmtExpr (Assign "num" (Binary Plus (Binary Mult (Var "num") (NatLit 10)) (NatLit 4)))] [If (Binary Equ (Var "in") (CharLit '5')) [StmtExpr (Assign "num" (Binary Plus (Binary Mult (Var "num") (NatLit 10)) (NatLit 5)))] [If (Binary Equ (Var "in") (CharLit '6')) [StmtExpr (Assign "num" (Binary Plus (Binary Mult (Var "num") (NatLit 10)) (NatLit 6)))] [If (Binary Equ (Var "in") (CharLit '7')) [StmtExpr (Assign "num" (Binary Plus (Binary Mult (Var "num") (NatLit 10)) (NatLit 7)))] [If (Binary Equ (Var "in") (CharLit '8')) [StmtExpr (Assign "num" (Binary Plus (Binary Mult (Var "num") (NatLit 10)) (NatLit 8)))] [If (Binary Equ (Var "in") (CharLit '9')) [StmtExpr (Assign "num" (Binary Plus (Binary Mult (Var "num") (NatLit 10)) (NatLit 9)))] [StmtExpr (Assign "fin" (NatLit 1))]]]]]]]]]]]),Com (If (Binary Equ (Var "op") (CharLit 'a')) [StmtExpr (Assign "total" (Binary Plus (Var "total") (Var "num")))] [If (Binary Equ (Var "op") (CharLit 's')) [StmtExpr (Assign "total" (Binary Minus (Var "total") (Var "num")))] [If (Binary Equ (Var "op") (CharLit 'm')) [StmtExpr (Assign "total" (Binary Mult (Var "total") (Var "num")))] [If (Binary Equ (Var "op") (CharLit 'd')) [StmtExpr (Assign "total" (Binary Div (Var "total") (Var "num")))] []]]]),Decl (VarDef int "rev"),Decl (VarDef int "resto"),Com (StmtExpr (Assign "rev" (NatLit 0))),Com (While (Var "total") [StmtExpr (Assign "resto" (Binary Mod (Var "total") (NatLit 10))),StmtExpr (Assign "rev" (Binary Plus (Binary Mult (Var "rev") (NatLit 10)) (Var "resto"))),StmtExpr (Assign "total" (Binary Div (Var "total") (NatLit 10)))]),Decl (VarDef int "digit"),Com (While (Unary Not (Binary Equ (Var "rev") (NatLit 0))) [StmtExpr (Assign "digit" (Binary Mod (Var "rev") (NatLit 10))),StmtExpr (Assign "rev" (Binary Div (Var "rev") (NatLit 10))),If (Binary Equ (Var "digit") (NatLit 0)) [PutChar (CharLit '0')] [If (Binary Equ (Var "digit") (NatLit 1)) [PutChar (CharLit '1')] [If (Binary Equ (Var "digit") (NatLit 2)) [PutChar (CharLit '2')] [If (Binary Equ (Var "digit") (NatLit 3)) [PutChar (CharLit '3')] [If (Binary Equ (Var "digit") (NatLit 4)) [PutChar (CharLit '4')] [If (Binary Equ (Var "digit") (NatLit 5)) [PutChar (CharLit '5')] [If (Binary Equ (Var "digit") (NatLit 6)) [PutChar (CharLit '6')] [If (Binary Equ (Var "digit") (NatLit 7)) [PutChar (CharLit '7')] [If (Binary Equ (Var "digit") (NatLit 8)) [PutChar (CharLit '8')] [If (Binary Equ (Var "digit") (NatLit 9)) [PutChar (CharLit '9')] []]]]]]]]]]])]
